{"ast":null,"code":"/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n    }\n    return Object.keys(axis);\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  options;\n  constructor(options) {\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._each('register', args);\n  }\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._each('unregister', args);\n  }\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._each('register', args, this.controllers);\n  }\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    this._each('register', args, this.elements);\n  }\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this._each('register', args, this.plugins);\n  }\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.5.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    const clip = getDatasetClipArea(this, meta);\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n    meta.controller.draw();\n    if (clip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipSelf(ctx, element, endAngle) {\n  const {\n    startAngle,\n    x,\n    y,\n    outerRadius,\n    innerRadius,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset,\n    borderRadius\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    chart,\n    index,\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis,\n      clip\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale,\n    clip\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {\n        line,\n        target,\n        color: above,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: fillColor,\n    scale,\n    property,\n    clip\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale,\n    clip\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n    ctx.beginPath();\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  static positioners = positioners;\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n      callback(label) {\n        return label;\n      },\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","axisID","axisNumber","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getDatasetClipArea","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipSelf","borderJoinStyle","outerAngleClip","_normalizeAngle","innerAngleClip","clipWidth","closePath","rect","clipArc","pixelMargin","angleMargin","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","inner","lineJoin","selfJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","fillColor","clipVertical","clipHorizontal","clipY","lineLoop","clipX","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.animator.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.animation.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.animations.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.datasetController.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.line.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.adapters.ts","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.interaction.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.layouts.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\platform\\platform.base.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\platform\\platform.basic.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\platform\\platform.dom.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\platform\\index.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.element.ts","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.scale.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.registry.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.plugins.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.config.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\core\\core.controller.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\elements\\element.arc.ts","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\elements\\element.line.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\elements\\element.point.ts","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\elements\\element.bar.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.category.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.linear.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.time.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","E:\\Programacion\\Proyectos\\Pokemon\\pokedex-app\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(\n        this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId\n      )] = true;\n    }\n    return Object.keys(axis);\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea, _isDomSupported, retinaScale, getDatasetClipArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    // @ts-expect-error\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _angleDiff, _normalizeAngle, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\nfunction clipSelf(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, x, y, outerRadius, innerRadius, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.clip('evenodd');\n}\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset, borderRadius} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of a segment -> need to add another point before this,\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of a segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea, getDatasetClipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {chart, index, line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis, clip});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale, clip} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {line, target, color: above, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {line, target, color: below, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {line, target, color: fillColor, scale, property, clip});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction clipHorizontal(ctx, target, clipX) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale, clip} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}